@page "/user/orders"
@using Inked.Ordering.Domain.AggregatesModel.OrderAggregate
@attribute [Authorize]
@attribute [StreamRendering]
@inject OrderingService OrderingService
@inject IJSRuntime JsRuntime

<PageTitle>Orders | AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">Orders</SectionContent>
<OrdersRefreshOnStatusChange/>

<div class="orders">
    @if (orders is null)
    {
        <p>Loading...</p>
    }
    else if (orders.Length == 0)
    {
        <p>You haven't yet placed any orders.</p>
    }
    else
    {
        <ul class="orders-list">
            <li class="orders-header orders-item">
                <div>Number</div>
                <div>Date</div>
                <div class="total-header">Total</div>
                <div>Status</div>
                <div>Options</div>
            </li>
            @foreach (var order in orders)
            {
                <li class="orders-item">
                    <div class="order-number">
                        @order.OrderNumber
                    </div>
                    <div class="order-date">
                        @order.Date
                    </div>
                    <div class="order-total">
                        $@order.Total.ToString("0.00")
                    </div>
                    <div class="order-status">
                    <span class="status @order.Status.ToString().ToLower()">
                        @order.Status.ToString()
                    </span>
                    </div>
                    <div>
                        @if (order.Status == OrderStatus.Shipped)
                        {
                            <button class="request-return-button" @onclick="() => RequestReturn(order.OrderNumber)">
                                Request Return
                            </button>
                        }
                        else if (order.Status != OrderStatus.Cancelled)
                        {
                            <button class="cancel-button" @onclick="() => CancelOrder(order.OrderNumber)">Cancel
                            </button>
                        }
                    </div>
                </li>
            }
        </ul>
    }
</div>

@code {
    private OrderRecord[]? orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orders = await OrderingService.GetOrders();
    }

    private async Task CancelOrder(int orderNumber)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to cancel order {orderNumber}?");
        if (confirmed)
        {
            await OrderingService.CancelOrder(orderNumber);
            await LoadOrders();
        }
    }

    private async Task RequestReturn(int orderNumber)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to request a return for order {orderNumber}?");
        if (confirmed)
        {
            await OrderingService.RequestReturn(orderNumber);
            await LoadOrders();
        }
    }

}